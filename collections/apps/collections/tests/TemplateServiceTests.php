<?php
/**
 * [TemplateServiceTests.php]
 * Collections - Research data packaging for the rest of us
 * Copyright (C) 2017 Intersect Australia Ltd (https://intersect.org.au)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
namespace OCA\collections\Service;

use PHPUnit\Framework\TestCase;
use OCA\collections\Tests\Helper;

include_once('service/TemplateService.php');

class TemplateServiceTests extends TestCase {

    private $templateService;

    public function setUp() {
        parent::setUp();
        $this->templateService = new TemplateService();
    }

    public function testGetFieldContextReturnsExpectedWithOneSavedOccurrence() {
        $this->assertExpectedContextEqualsActualContext('fieldWithOneOccurrence.json', 'getFieldContext');
    }

    public function testGetFieldContextReturnsExpectedWithManySavedOccurrences() {
        $this->assertExpectedContextEqualsActualContext('fieldWithManyOccurrences.json', 'getFieldContext');
    }

    public function testGetGroupContextReturnsExpected() {
        $this->assertExpectedContextEqualsActualContext('group.json', 'getGroupContext');
    }

    public function testGetCategoryContextReturnsExpectedForCategoryOnlyContainingFields() {
        $this->assertExpectedContextEqualsActualContext('categoryWithFields.json', 'getCategoryContext');
    }

    public function testGetCategoryContextReturnsExpectedForCategoryOnlyContainingGroups() {
        $this->assertExpectedContextEqualsActualContext('categoryWithGroups.json', 'getCategoryContext');
    }

    public function testGetCategoriesContextReturnsExpectedForAllCollectionCategories() {
        $this->assertExpectedContextEqualsActualContext('categories.json', 'getCategoriesContext');
    }

    /**
     * Asserts that the expected context matches the actual context generated by the specified method.
     * @param string $expectedContextFileName name of the file containing the expected context, e.g. 'field.json'
     * @param string $methodName name of method to use to generate the actual context
     */
    private function assertExpectedContextEqualsActualContext($expectedContextFileName, $methodName) {
        $metadataDefinition = $this->getJsonDecodedExampleMetadataDefinition($expectedContextFileName);
        $savedMetadata = $this->getJsonDecodedExampleSavedMetadata($expectedContextFileName);
        $expectedContext = $this->getJsonDecodedExampleExpectedMustacheContext($expectedContextFileName);
        $actualContext = Helper::invokeMethod($this->templateService, $methodName, [$metadataDefinition, $savedMetadata]);
        $this->assertEquals($expectedContext, $actualContext);
    }

    private function getJsonDecodedExampleMetadataDefinition ($exampleFileName) {
        return json_decode(file_get_contents(dirname(__FILE__) . '/examples/metadata-definition/' . $exampleFileName), true);
    }

    private function getJsonDecodedExampleSavedMetadata ($exampleFileName) {
        return json_decode(file_get_contents(dirname(__FILE__) . '/examples/saved-metadata/' . $exampleFileName), true);
    }

    // Note: The templateService does not actually encode the context as JSON, but it is easier to look at than PHP arrays.
    private function getJsonDecodedExampleExpectedMustacheContext ($exampleFileName) {
        return json_decode(file_get_contents(dirname(__FILE__) . '/examples/expected-mustache-context/' . $exampleFileName), true);
    }

    public function testGetDirectoryContextReturnsExpectedForEmptyRootDirectory() {
        $emptyRootDir = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $emptyRootDir->method('getFolders')->willReturn(array());
        $emptyRootDir->method('getFiles')->willReturn(array());

        $expectedContext = array(); // Context of root folder shouldn't return anything when empty
        $actualContext = Helper::invokeMethod($this->templateService, 'getDirectoryContext', [$emptyRootDir, null, true]);
        $this->assertEquals($expectedContext, $actualContext);
    }

    public function testGetDirectoryContextReturnsExpectedForEmptyDirectory() {
        $emptyDir = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $emptyDir->method('getName')->willReturn('emptyDirectory');
        $emptyDir->method('getFolders')->willReturn(array());
        $emptyDir->method('getFiles')->willReturn(array());

        $expectedContext = array(
            'directoryContents' => array(),
            'name' => 'emptyDirectory',
            'path'=> 'emptyDirectory'
        );
        $actualContext = Helper::invokeMethod($this->templateService, 'getDirectoryContext', [$emptyDir]);
        $this->assertEquals($expectedContext, $actualContext);
    }

    public function testGetDirectoryContextReturnsExpectedForSingleFile() {
        $file = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $file->method('getName')->willReturn('some_image.png');

        $rootDir = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getFolders', 'getFiles'))
            ->getMock();
        $rootDir->method('getFolders')->willReturn(array());
        $rootDir->method('getFiles')->willReturn(array($file));

        $expectedContext = array(
            array(
                'directoryContents' => null,
                'name' => 'some_image.png',
                'path'=> 'some_image.png'
            )
        );
        $actualContext = Helper::invokeMethod($this->templateService, 'getDirectoryContext', [$rootDir, null, true]);
        $this->assertEquals($expectedContext, $actualContext);
    }

    public function testGetDirectoryContextReturnsExpectedForManyFiles() {
        $file1 = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $file1->method('getName')->willReturn('image_1.png');

        $file2 = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $file2->method('getName')->willReturn('image_2.png');

        $rootDir = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getFolders', 'getFiles'))
            ->getMock();
        $rootDir->method('getFolders')->willReturn(array());
        $rootDir->method('getFiles')->willReturn(array($file1, $file2));

        $expectedContext = array(
            array(
                'directoryContents' => null,
                'name' => 'image_1.png',
                'path'=> 'image_1.png'
            ),
            array(
                'directoryContents' => null,
                'name' => 'image_2.png',
                'path'=> 'image_2.png'
            )
        );
        $actualContext = Helper::invokeMethod($this->templateService, 'getDirectoryContext', [$rootDir, null, true]);
        $this->assertEquals($expectedContext, $actualContext);
    }

    public function testGetFileListContextReturnsExpectedForNestedFileTree() {
        // Contents of directory Photos
        $photos_paris = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $photos_paris->method('getName')->willReturn('Paris.jpg');

        $photos_squirrel = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $photos_squirrel->method('getName')->willReturn('Squirrel.jpg');

        // Contents of directory Documents/Instructions
        $documents_instructions_manual = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $documents_instructions_manual->method('getName')->willReturn('manual.pdf');

        // Contents of directory Documents
        $documents_instructions = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $documents_instructions->method('getName')->willReturn('Instructions');
        $documents_instructions->method('getFolders')->willReturn(array());
        $documents_instructions->method('getFiles')->willReturn(array($documents_instructions_manual));

        // Contents of root directory
        $readme = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $readme->method('getName')->willReturn('README.txt');

        $emptyDir = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $emptyDir->method('getName')->willReturn('emptyDirectory');
        $emptyDir->method('getFolders')->willReturn(array());
        $emptyDir->method('getFiles')->willReturn(array());

        $photos = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $photos->method('getName')->willReturn('Photos');
        $photos->method('getFolders')->willReturn(array());
        $photos->method('getFiles')->willReturn(array($photos_paris, $photos_squirrel));

        $documents = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $documents->method('getName')->willReturn('Documents');
        $documents->method('getFolders')->willReturn(array($documents_instructions));
        $documents->method('getFiles')->willReturn(array());

        // Root Directory
        $rootDirectory = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getFolders', 'getFiles'))
            ->getMock();
        $rootDirectory->method('getFolders')->willReturn(array($documents, $emptyDir, $photos));
        $rootDirectory->method('getFiles')->willReturn(array($readme));

        // Collection containing file tree within the root directory
        $collection = $this->getMockBuilder('OCA\collections\Entity\Crate')
            ->setMethods(array('getRootFolder'))
            ->getMock();
        $collection->method('getRootFolder')->willReturn($rootDirectory);

        $expectedContext = $this->getJsonDecodedExampleExpectedMustacheContext('fileTree.json');
        $actualContext = Helper::invokeMethod($this->templateService, 'getFileListContext', [$collection]);
        $this->assertEquals($expectedContext, $actualContext);
    }

    public function testGetCollectionMustacheContextReturnsExpectedForCollectionWithFileTree() {
        $photos_paris = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $photos_paris->method('getName')->willReturn('Paris.jpg');

        $photos_squirrel = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $photos_squirrel->method('getName')->willReturn('Squirrel.jpg');

        $photos = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getName', 'getFolders', 'getFiles'))
            ->getMock();
        $photos->method('getName')->willReturn('Photos');
        $photos->method('getFolders')->willReturn(array());
        $photos->method('getFiles')->willReturn(array($photos_paris, $photos_squirrel));

        $readme = $this->getMockBuilder('OCA\collections\Entity\File')
            ->setMethods(array('getName'))
            ->getMock();
        $readme->method('getName')->willReturn('README.txt');

        $rootDirectory = $this->getMockBuilder('OCA\collections\Entity\Folder')
            ->setMethods(array('getFolders', 'getFiles'))
            ->getMock();
        $rootDirectory->method('getFolders')->willReturn(array($photos));
        $rootDirectory->method('getFiles')->willReturn(array($readme));

        $collection = $this->getMockBuilder('OCA\collections\Entity\Crate')
            ->setMethods(array('getName', 'getRootFolder', 'getMetadataSchema', 'getSavedMetadata'))
            ->getMock();
        $collection->method('getRootFolder')->willReturn($rootDirectory);
        $collection->method('getMetadataSchema')->willReturn(file_get_contents(dirname(__FILE__) .
            '/examples/metadata-definition/collection.json'));
        $collection->method('getSavedMetadata')->willReturn(file_get_contents(dirname(__FILE__) .
            '/examples/saved-metadata/collection.json'));
        $collection->method('getName')->willReturn('Collection 1.1');

        $expectedContext = $this->getJsonDecodedExampleExpectedMustacheContext('collection.json');
        $actualContext = Helper::invokeMethod($this->templateService, 'getCollectionMustacheContext', [$collection]);
        $this->assertEquals($expectedContext, $actualContext);
    }
}
